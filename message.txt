-- Minimal Autofarm extracted (requires the map structure like original script)
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local player = Players.LocalPlayer

-- Octree lib (same source as original)
local Octree = loadstring(game:HttpGet("https://raw.githubusercontent.com/Sleitnick/rbxts-octo-tree/main/src/init.lua", true))()

local autofarm = {}
autofarm.octree = Octree.new()
autofarm.touched = {}
autofarm.connections = {}
autofarm.coinContainer = nil
autofarm.radius = 200
autofarm.walkspeed = 30
autofarm.running = false

local function isCoinTouched(c) return autofarm.touched[c] end
local function markTouched(c)
    autofarm.touched[c] = true
    local node = autofarm.octree:FindFirstNode(c)
    if node then autofarm.octree:RemoveNode(node) end
end

local function setupTouchTracking(coin)
    local ti = coin:FindFirstChildWhichIsA("TouchTransmitter")
    if not ti then return end
    local conn
    conn = ti.AncestryChanged:Connect(function(_, parent)
        if not parent then
            markTouched(coin)
            conn:Disconnect()
        end
    end)
    table.insert(autofarm.connections, conn)
end

local function setupPositionTracking(coin)
    local lastY = coin.Position.Y
    local conn = coin:GetPropertyChangedSignal("Position"):Connect(function()
        local curY = coin.Position.Y
        if curY ~= lastY then
            markTouched(coin)
            conn:Disconnect()
            pcall(function() coin:Destroy() end)
        end
    end)
    table.insert(autofarm.connections, conn)
end

local function populate()
    autofarm.octree:ClearAllNodes()
    if not autofarm.coinContainer then return end
    for _, d in pairs(autofarm.coinContainer:GetDescendants()) do
        if d:IsA("TouchTransmitter") then
            local parentCoin = d.Parent
            if not isCoinTouched(parentCoin) then
                autofarm.octree:CreateNode(parentCoin.Position, parentCoin)
                setupTouchTracking(parentCoin)
                setupPositionTracking(parentCoin)
            end
        end
    end
    autofarm.coinContainer.DescendantAdded:Connect(function(desc)
        if desc:IsA("TouchTransmitter") then
            local p = desc.Parent
            if not isCoinTouched(p) then
                autofarm.octree:CreateNode(p.Position, p)
                setupTouchTracking(p)
                setupPositionTracking(p)
            end
        end
    end)
end

local function cleanup()
    for _, c in pairs(autofarm.connections) do
        if c and c.Connected then pcall(function() c:Disconnect() end) end
    end
    table.clear(autofarm.touched)
    autofarm.octree:ClearAllNodes()
    autofarm.connections = {}
end

local function moveToSlowly(target, duration)
    local char = player.Character
    if not char or not char.PrimaryPart then return end
    local start = char.PrimaryPart.Position
    local t0 = tick()
    while true do
        local alpha = math.min((tick()-t0)/duration, 1)
        if not player.Character or not player.Character.PrimaryPart then break end
        player.Character:PivotTo(CFrame.new(start:Lerp(target, alpha)))
        if alpha >= 1 then break end
        task.wait()
    end
end

local function collectLoop()
    autofarm.coinContainer = (Workspace:FindFirstChildWhichIsA("Model") and Workspace:FindFirstChild("CoinContainer")) or autofarm.coinContainer
    populate()
    while autofarm.running do
        local char = player.Character
        if not char or not char.PrimaryPart then break end
        local node = autofarm.octree:GetNearest(char.PrimaryPart.Position, autofarm.radius, 1)[1]
        if node then
            local coin = node.Object
            if not isCoinTouched(coin) then
                local target = coin.Position
                local dur = (char.PrimaryPart.Position - target).Magnitude / autofarm.walkspeed
                moveToSlowly(target, dur == 0 and 0.1 or dur)
                markTouched(coin)
                task.wait(0.2)
            end
        else
            task.wait(1)
        end
    end
    cleanup()
end

-- Public controls
function autofarm.Start(mapCoinContainer)
    autofarm.coinContainer = mapCoinContainer
    autofarm.running = true
    spawn(collectLoop)
end
function autofarm.Stop()
    autofarm.running = false
    cleanup()
end

-- Example usage:
-- local mc = workspace:FindFirstChild("MapName") and workspace.MapName:FindFirstChild("CoinContainer")
-- autofarm.Start(mc)
-- autofarm.Stop()

return autofarm
